@model VaaaN.ATMS.Libraries.CommonLibrary.CBE.CctvCBE

@{
    ViewBag.Title = "Add CCTV";
    Layout = "~/Views/Shared/_LayoutPage.cshtml";
}


@using (Html.BeginForm("AddCctv", "Home", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <div class="panel panel-info">
        <div class="panel-heading" style="background-color:rgb(64, 178, 205);">
            <h1 class="panel-title new-title">New CCTV</h1>
        </div>
        <div class="panel-body">
            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.ControlRoomId, htmlAttributes: new { @class = "control-label col-md-2 required" })
                    <div class="col-md-4">
                        @Html.DropDownList("ddlControlRoom", (IEnumerable<SelectListItem>)ViewBag.ControlRoom, new { @class = "form-control" })
                        @*@Html.EditorFor(model => model.ControlRoomID, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.ControlRoomId, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.CameraName, htmlAttributes: new { @class = "control-label col-md-2 required" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.CameraName, new { htmlAttributes = new { @class = "form-control ", autofocus = "true" } })
                        @Html.ValidationMessageFor(model => model.CameraName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Chainage, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Chainage, new { htmlAttributes = new { @class = "form-control", type = "number", min = "0", max = "310" } })
                        @Html.ValidationMessageFor(model => model.Chainage, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.Chainage_Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Chainage_Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Chainage_Name, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Make, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Make, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Make, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.Is_Active, htmlAttributes: new { @class = "control-label col-md-2" })

                    <div class="col-md-4">
                        @Html.DropDownList("ddlIsActive", new List<SelectListItem>
                            {
                                new SelectListItem{ Text="Yes", Value = "1" },
                                new SelectListItem{ Text="No", Value = "0" }
                             }, new { @class = "form-control" })

                        @Html.ValidationMessageFor(model => model.Direction, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">

                    @Html.LabelFor(model => model.CameraModel, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.CameraModel, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CameraModel, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.IPAddress, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.IPAddress, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.IPAddress, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">

                    @Html.LabelFor(model => model.CameraUserId, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.CameraUserId, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CameraUserId, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.CameraPassword, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.CameraPassword, new { htmlAttributes = new { @class = "form-control", type = "password", autocomplete = "new-password" } })
                        @Html.ValidationMessageFor(model => model.CameraPassword, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">@Html.LabelFor(model => model.Direction, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.DropDownList("ddlDirection", new List<SelectListItem>
                            {
                                new SelectListItem{ Text="Up", Value = "1" },
                                new SelectListItem{ Text="Down", Value = "2" }
                             }, new { @class = "form-control" })

                    @Html.ValidationMessageFor(model => model.Direction, "", new { @class = "text-danger" })
                </div>
                    @Html.LabelFor(model => model.SupportPTZ, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.DropDownList("ddlSupportPTZ", (IEnumerable<SelectListItem>)ViewBag.supportPTZ, new { @class = "form-control" })


                        @Html.ValidationMessageFor(model => model.SupportPTZ, "", new { @class = "text-danger" })
                    </div>
                    <span id="lblErrors" style="color:red;float:right">@TempData["lblerror"]</span>
                </div>


                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Submit" class="btn btn-primary" onclick="return Validation();" />
                        &nbsp;&nbsp;@Html.ActionLink("Back", "Cctvlist", "Home", new { @class = "btn btn-primary" })

                    </div>
                </div>

                <script>
              
                    function Validation() {
                        if ($("#ddlControlRoom option:selected").val() == '0') {
                            $("#lblErrors").text("");
                            $("#lblErrors").text("Select Control Room from dropdown.");

                            return false;

                        }
                        if ($("#CameraName").val() == '') {
                            $("#lblErrors").text("");
                            $("#lblErrors").text("Enter Camera Name.");

                            return false;
                        }
                        if ($("#ddlSupportPTZ option:selected").val() == '-1') {
                            $("#lblErrors").text("");
                            $("#lblErrors").text("Select Support PTZ from dropdown.");

                            return false;

                        } if ($("#Chainage").val() < 0 || $("#Chainage").val() > 310) {
                            $("#lblErrors").text("");
                            $("#lblErrors").text("Enter Chainage between range 0 to 310.");

                            return false;
                        }
                        if ($("#CameraUserId").val() != "" && $("#CameraPassword").val()=="") {
                            $("#lblErrors").text("");
                            $("#lblErrors").text("please enter camera password also.");

                            return false;
                        }
                        if ($("#CameraPassword").val() != "" && $("#CameraUserId").val() == "") {
                            $("#lblErrors").text("");
                            $("#lblErrors").text("please enter camera userid also.");

                            return false;
                        } if ($("#Chainage_Name").val() != "" && $("#Chainage").val() == "") {
                            $("#lblErrors").text("");
                            $("#lblErrors").text("Enter Chainage also ,if Chainage Name entered.");

                            return false;
                        }
                        if ($("#Chainage").val() != "" && $("#Chainage_Name").val() == "") {
                            $("#lblErrors").text("");
                            $("#lblErrors").text("Enter Chainage Name also ,if Chainage entered.");

                            return false;
                        }
                        return true;

                    }
                </script>

                @*<script src="/scripts/jquery.validate.min.js"></script>*@
                @*<script src="~/scripts/jquery.validate.unobtrusive.min.js"></script>*@
            </div>
        </div>
    </div>

}
